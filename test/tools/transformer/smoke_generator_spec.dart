library angular.test.tools.transformer.smoke_generator_spec;

import 'package:angular/tools/transformer/smoke_generator.dart';
import 'package:code_transformers/resolver.dart';
import 'package:code_transformers/tests.dart' as tests;

import 'package:unittest/unittest.dart' hide expect;
import 'package:guinness/guinness.dart';

main() {
  describe('Smoke Generator', () {
    var resolvers = new Resolvers(dartSdkDirectory);

    var phases = [
      [new SmokeGenerator(resolvers)]
    ];

    it('should extract code metadata', () {
      return tests.applyTransformers(phases,
          inputs: {
            'observe|lib/observe.dart': libObserve,
            'a|web/main.dart': r'''
import 'package:observe/observe.dart';

// Code generated by the Observable transformer
class Foo extends ChangeNotifier {
  @reflectable @observable int get obs => __$obs;
  int __$obs;
  @reflectable set obs(value) {
    __$obs = notifyPropertyChange(#obs, __$obs, value);
  }

  var nObs = 0;
}

main() {}
''',
          },
          results: {
              'a|web/main.dart': r'''
import 'package:observe/observe.dart';

// Code generated by the Observable transformer
class Foo extends ChangeNotifier {
  @reflectable @observable int get obs => __$obs;
  int __$obs;
  @reflectable set obs(value) {
    __$obs = notifyPropertyChange(#obs, __$obs, value);
  }

  var nObs = 0;
}

main() {}
''',
              'a|web/main_static_smoke.dart': '''
library a.web.main.smoke_static;
import 'package:smoke/smoke.dart' show Declaration, PROPERTY, METHOD;
import 'package:smoke/static.dart' show useGeneratedCode, StaticConfiguration;
import 'main.dart' as smoke_0;
import 'package:observe/observe.dart' as smoke_1;
void init() {
  useGeneratedCode(new StaticConfiguration(
      checkedMode: false,
      getters: {
        #obs: (o) => o.obs,
      },
      setters: {
        #obs: (o, v) { o.obs = v; },
      },
      declarations: {
        smoke_0.Foo: {
          #obs: const Declaration(#obs, int, kind: PROPERTY, annotations: const [smoke_1.reflectable, smoke_1.observable]),
        },
      },
      names: {
        #obs: r\'obs\',
      }));
}
''',
          });
    });
  });
}

const libObserve = '''
library observe.src.metadata;

const ObservableProperty observable = const ObservableProperty();

class ObservableProperty {
  const ObservableProperty();
}

const Reflectable reflectable = const Reflectable();

class Reflectable {
  const Reflectable();
}
''';
